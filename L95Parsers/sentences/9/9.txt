Pos Tags (Stanford, Berkeley, Rasp)
Thus_RB the_DT EM-trained_JJ ''_'' pure_JJ HMM_NN ''_'' tagger_NN is_VBZ probably_RB best_RBS suited_VBN to_TO cases_NNS where_WRB no_DT training_NN data_NNS is_VBZ available_JJ ,_, for_IN example_NN ,_, when_WRB tagging_JJ languages_NNS for_IN which_WDT no_DT data_NNS was_VBD previously_RB hand-tagged_JJ ._.
Thus_RB the_DT tagger_NN is_VBZ probably_RB best_RB suited_VBN to_TO cases_NNS where_WRB no_DT training_NN data_NNS is_VBZ available,_VBN for_IN example,_NN when_WRB tagging_VBG languages_NNS for_IN which_WDT no_DT data_NNS was_VBD previously_RB 
Thus_RR the_AT EM-trained_JJ ''pure_JJ HMM''_NN1 tagger_NN1 be+s_VBZ probably_RR best_RRT suit+ed_VVN to_II case+s_NN2 where_RRQ no_AT training_NN1 datum+s_NN2 be+s_VBZ available_JJ ,_, for_IF example_NN1 ,_, when_RRQ tag+ing_VVG language+s_NN2 for_IF which_DDQ no_AT datum+s_NN2 be+ed_VBDZ previously_RR hand-tagged_JB ._. 


Full Tree (Stanford, Berkeley, Rasp)
( ( S( ADVP( RB Thus))( NP( DT the)( JJ EM-trained)( '' '')( JJ pure)( NN HMM)( '' '')( NN tagger))( VP( VBZ is)( ADVP( RB probably))( VP( ADVP( RBS best))( VBN suited)( PP( TO to)( NP  ( NP( NNS cases))  ( SBAR    ( WHADVP( WRB where))    ( S      ( NP( DT no)( NN training)( NNS data))      ( VP( VBZ is)        ( ADJP( JJ available))        ( , ,)        ( PP( IN for)          ( NP            ( NP( NN example))            ( , ,)            ( SBAR              ( WHNP                ( NP( WRB when)( JJ tagging)( NNS languages))                ( WHPP( IN for)                  ( WHNP( WDT which))))              ( S                ( NP( DT no)( NNS data))                ( VP( VBD was)                  ( ADJP( RB previously)( JJ hand-tagged))))))))))))))( . .)))
( ( S( ADVP( RB Thus))( NP( DT the)( JJ EM-trained)( JJ ''pure)( NNP HMM'')( NN tagger))( VP( VBZ is)( ADVP( RB probably))( VP( ADVP( RB best))( VBN suited)( PP( TO to)( NP( NP( NNS cases))( SBAR( WHADVP( WRB where))( S( NP( DT no)( NN training)( NNS data))( VP( VBZ is)( VP( VBN available,)( PP( IN for)( NP( NN example,)))( SBAR( WHADVP( WRB when))( S( VP( VBG tagging)( NP( NP( NNS languages))( SBAR( WHPP( IN for)( WHNP( WDT which)))( S( NP( DT no)( NNS data))( VP( VBD was)( ADVP( RB previously))( ADJP( JJ hand-tagged.)))))))))))))))))) )
 ( ( NP ( RR Thus)( AT the)( JJ EM-trained)( JJ ''pure)( NN1 HMM'') ( S( NN1 tagger) ( VP( VBZ be+s) ( AP( RR probably)( RRT best)) ( VP( VVN suit+ed) ( PP( II to) ( NP( NN2 case+s)( RRQ where))))))) ( NP( AT no)( NN1 training)( NN2 datum+s)) ( VP( VBZ be+s)( JJ available))(, ,) ( S( PP ( IF for)( NN1 example))(, ,) ( S( RRQ when)( S ( VP( VVG tag+ing)( NN2 language+s) ( PP( IF for) ( NP( DDQ which)( AT no)( NN2 datum+s)))) ( VP( VBDZ be+ed) ( AP( RR previously)( JB hand-tagged))))))(. .))

Treebank-format Tree (Stanford, Berkeley, Rasp)
( (S (ADVP (RB  Thus))(NP (DT  the)(JJ  EM-trained)( '' '')(JJ  pure)(NN  HMM)( '' '')(NN  tagger))(VP (VBZ  is)(ADVP (RB  probably))(VP (ADVP (RBS  best))(VBN  suited)(PP (TO  to)(NP   (NP (NNS  cases))  (SBAR     (WHADV P(WRB  where))    (S       (NP (DT  no)(NN  training)(NNS  data))      (VP (VBZ  is)        (ADJP (JJ  available))        ( , ,)        (PP (IN  for)          (NP             (NP (NN  example))            ( , ,)            (SBAR               (WHNP                 (NP (WRB  when)(JJ  tagging)(NNS  languages))                (WHPP (IN  for)                  (WHNP (WDT  which))))              (S                 (NP (DT  no)(NNS  data))                (VP (VBD  was)                  (ADJP (RB  previously)(JJ  hand-tagged))))))))))))))( . .)))
( (S (ADVP (RB  Thus))(NP (DT  the)(JJ  EM-trained)(JJ  “pure)(NNP  HMM”)(NN  tagger))(VP (VBZ  is)(ADVP (RB  probably))(VP (ADVP (RB  best))(VBN  suited)(PP (TO  to)(NP (NP (NNS  cases))(SBAR (WHADV P(WRB  where))(S (NP (DT  no)(NN  training)(NNS  data))(VP (VBZ  is)(VP (VBN  available,)(PP (IN  for)(NP (NN  example,)))(SBAR (WHADV P(WRB  when))(S (VP (VBG  tagging)(NP (NP (NNS  languages))(SBAR (WHPP (IN  for)(WHNP (WDT  which)))(S (NP (DT  no)(NNS  data))(VP (VBD  was)(ADVP (RB  previously))(ADJP (JJ  hand-tagged.)))))))))))))))))) )
 ( (NP  (RR  Thus)(AT  the)(JJ  EM-trained)(JJ  ''pure)(NN1  HMM'') (S (NN1  tagger) (VP (VBZ  be+s) (AP (RR  probably)(RRT  best)) (VP (VVN  suit+ed) (PP (II  to) (NP (NN2  case+s)(RRQ  where))))))) (NP (AT  no)(NN1  training)(NN2  datum+s)) (VP (VBZ  be+s)(JJ  available))(, ,) (S (PP  (IF  for)(NN1  example))(, ,) (S (RRQ  when)(S  (VP (VVG  tag+ing)(NN2  language+s) (PP (IF  for) (NP (DDQ  which)(AT  no)(NN2  datum+s)))) (VP (VBDZ  be+ed) (AP (RR  previously)(JB  hand-tagged))))))(. .))


Dependencies (Stanford, Berkeley, Rasp)
advmod(suited-12, Thus-1)
det(tagger-8, the-2)
amod(tagger-8, EM-trained-3)
amod(tagger-8, pure-5)
compound(tagger-8, HMM-6)
nsubjpass(suited-12, tagger-8)
auxpass(suited-12, is-9)
advmod(suited-12, probably-10)
advmod(suited-12, best-11)
root(ROOT-0, suited-12)
case(cases-14, to-13)
nmod:to(suited-12, cases-14)
nmod:for(languages-27, cases-14)
advmod(available-20, where-15)
neg(data-18, no-16)
compound(data-18, training-17)
nsubj(available-20, data-18)
cop(available-20, is-19)
acl:relcl(cases-14, available-20)
case(example-23, for-22)
nmod:for(available-20, example-23)
nmod:for(languages-27, example-23)
advmod(languages-27, when-25)
amod(languages-27, tagging-26)
dobj(hand-tagged-34, languages-27)
case(which-29, for-28)
ref(cases-14, which-29)
ref(example-23, which-29)
neg(data-31, no-30)
nsubj(hand-tagged-34, data-31)
cop(hand-tagged-34, was-32)
advmod(hand-tagged-34, previously-33)
acl:relcl(example-23, hand-tagged-34)

advmod(suited-10, Thus-1)
det(tagger-6, the-2)
amod(tagger-6, EM-trained-3)
amod(tagger-6, “pure-4)
compound(tagger-6, HMM”-5)
nsubjpass(suited-10, tagger-6)
auxpass(suited-10, is-7)
advmod(suited-10, probably-8)
advmod(suited-10, best-9)
root(ROOT-0, suited-10)
case(cases-12, to-11)
nmod(suited-10, cases-12)
advmod(available,-18, where-13)
neg(data-16, no-14)
compound(data-16, training-15)
nsubjpass(available,-18, data-16)
auxpass(available,-18, is-17)
acl:relcl(cases-12, available,-18)
case(example,-20, for-19)
nmod(available,-18, example,-20)
advmod(tagging-22, when-21)
advcl(available,-18, tagging-22)
dobj(tagging-22, languages-23)
case(which-25, for-24)
nmod(hand-tagged.-30, which-25)
neg(data-27, no-26)
nsubj(hand-tagged.-30, data-27)
cop(hand-tagged.-30, was-28)
advmod(hand-tagged.-30, previously-29)
acl:relcl(languages-23, hand-tagged.-30)

(|ncmod| _ |be+ed_VBDZ-30| |for_IF-26-20|)
(|arg_mod| _ |be+ed_VBDZ-30| |when_RRQ-23|)
(|xsubj| |be+ed_VBDZ-30| |tag+ing_VVG-24| _)
(|xcomp| _ |be+ed_VBDZ-30| |hand-tagged_JB-32|)
(|ncmod| _ |hand-tagged_JB-32| |previously_RR-31|)
(|iobj| |tag+ing_VVG-24| |for_IF-26-20|)
(|dobj| |tag+ing_VVG-24| |language+s_NN2-25|)
(|dobj| |for_IF-26-20| |datum+s_NN2-29-16|)
(|det| |datum+s_NN2-29-16| |no_AT-28-14|)
(|det| |datum+s_NN2-29-16| |which_DDQ-27|)
(|dobj| |for_IF-26-20| |example_NN1-21|)
(|xcomp| _ |be+s_VBZ-17-7| |available_JJ-18|)
(|det| |datum+s_NN2-29-16| |no_AT-28-14|)
(|ncmod| _ |datum+s_NN2-29-16| |training_NN1-15|)
(|ncmod| _ |HMM”_NN1-5| |Thus_RR-1|)
(|det| |HMM”_NN1-5| |the_AT-2|)
(|ncmod| _ |HMM”_NN1-5| |EM-trained_JJ-3|)
(|ncmod| _ |HMM”_NN1-5| |“pure_JJ-4|)
(|ccomp| _ |HMM”_NN1-5| |suit+ed_VVN-10|)
(|ncsubj| |suit+ed_VVN-10| |tagger_NN1-6| _)
(|ncmod| _ |suit+ed_VVN-10| |best_RRT-9|)
(|aux| |suit+ed_VVN-10| |be+s_VBZ-17-7|)
(|passive| |suit+ed_VVN-10|)
(|iobj| |suit+ed_VVN-10| |to_II-11|)
(|dobj| |to_II-11| |case+s_NN2-12|)
(|ncmod| _ |case+s_NN2-12| |where_RRQ-13|)
(|ncmod| _ |best_RRT-9| |probably_RR-8|)
